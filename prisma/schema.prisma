generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  SHIPPED
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  orders    Order[]
  carts     Cart[]
}

model Category {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  products Product[]
}

model Product {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  description String?
  price       Int            // 金额（分）
  images      ProductImage[]
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())

  @@unique([userId])
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  status       OrderStatus  @default(PENDING)
  totalAmount  Int
  paymentRef   String?
  addressId    String?
  address      Address?     @relation(fields: [addressId], references: [id])
  items        OrderItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  price     Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  line1     String
  line2     String?
  city      String
  state     String?
  country   String
  postal    String
  orders    Order[]
}


